import mongoose from "mongoose";
import dotenv from "dotenv";

dotenv.config();

/**
 * L·ªõp l·ªói t√πy ch·ªânh ƒë·ªÉ x·ª≠ l√Ω c√°c l·ªói ·ª©ng d·ª•ng
 */
export class AppError extends Error {
  constructor(message, statusCode) {
    super(message);
    this.statusCode = statusCode;
    this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';
    this.isOperational = true;

    Error.captureStackTrace(this, this.constructor);
  }
}

/**
 * X·ª≠ l√Ω l·ªói CastError c·ªßa Mongoose (ID kh√¥ng h·ª£p l·ªá)
 */
const handleCastErrorDB = (err) => {
  const message = `Kh√¥ng h·ª£p l·ªá ${err.path}: ${err.value}`;
  return new AppError(message, 400);
};

/**
 * X·ª≠ l√Ω l·ªói tr√πng l·∫∑p d·ªØ li·ªáu trong Mongoose
 */
const handleDuplicateFieldsDB = (err) => {
  const value = err.errmsg.match(/(["'])(\\?.)*?\1/)[0];
  const message = `Gi√° tr·ªã tr√πng l·∫∑p: ${value}. Vui l√≤ng s·ª≠ d·ª•ng gi√° tr·ªã kh√°c!`;
  return new AppError(message, 400);
};

/**
 * X·ª≠ l√Ω l·ªói validation c·ªßa Mongoose
 */
const handleValidationErrorDB = (err) => {
  const errors = Object.values(err.errors).map(el => el.message);
  const message = `D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá. ${errors.join('. ')}`;
  return new AppError(message, 400);
};

/**
 * X·ª≠ l√Ω l·ªói JWT kh√¥ng h·ª£p l·ªá
 */
const handleJWTError = () => 
  new AppError('Token kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!', 401);

/**
 * X·ª≠ l√Ω l·ªói JWT h·∫øt h·∫°n
 */
const handleJWTExpiredError = () => 
  new AppError('Token ƒë√£ h·∫øt h·∫°n! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.', 401);

/**
 * G·ª≠i l·ªói trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn v·ªõi th√¥ng tin chi ti·∫øt
 */
const sendErrorDev = (err, res) => {
  res.status(err.statusCode).json({
    success: false,
    status: err.status,
    error: err,
    message: err.message,
    stack: err.stack
  });
};

/**
 * G·ª≠i l·ªói trong m√¥i tr∆∞·ªùng s·∫£n xu·∫•t v·ªõi th√¥ng tin h·∫°n ch·∫ø
 */
const sendErrorProd = (err, res) => {
  // L·ªói ho·∫°t ƒë·ªông, ƒë∆∞·ª£c tin c·∫≠y: g·ª≠i th√¥ng b√°o ƒë·∫øn client
  if (err.isOperational) {
    res.status(err.statusCode).json({
      success: false,
      status: err.status,
      message: err.message
    });
  } 
  // L·ªói l·∫≠p tr√¨nh ho·∫∑c l·ªói kh√¥ng x√°c ƒë·ªãnh: kh√¥ng r√≤ r·ªâ chi ti·∫øt l·ªói
  else {
    // Log l·ªói
    console.error('L·ªñI üí•', err);

    // G·ª≠i th√¥ng b√°o chung
    res.status(500).json({
      success: false,
      status: 'error',
      message: 'ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau!'
    });
  }
};

/**
 * Middleware x·ª≠ l√Ω l·ªói chung
 */
export const errorHandler = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';

  // X·ª≠ l√Ω kh√°c nhau d·ª±a tr√™n m√¥i tr∆∞·ªùng
  if (process.env.ENV === 'development') {
    sendErrorDev(err, res);
  } else {
    let error = { ...err };
    error.message = err.message;
    
    // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ
    if (err instanceof mongoose.Error.CastError) error = handleCastErrorDB(err);
    if (err.code === 11000) error = handleDuplicateFieldsDB(err);
    if (err instanceof mongoose.Error.ValidationError) error = handleValidationErrorDB(err);
    if (err.name === 'JsonWebTokenError') error = handleJWTError();
    if (err.name === 'TokenExpiredError') error = handleJWTExpiredError();

    sendErrorProd(error, res);
  }
};

/**
 * Middleware catch l·ªói kh√¥ng ƒë·ªìng b·ªô
 */
export const catchAsync = (fn) => {
  return (req, res, next) => {
    fn(req, res, next).catch(next);
  };
};

/**
 * Handler 404 - Kh√¥ng t√¨m th·∫•y
 */
export const notFound = (req, res, next) => {
  next(new AppError(`Kh√¥ng th·ªÉ t√¨m th·∫•y ${req.originalUrl} tr√™n m√°y ch·ªß n√†y!`, 404));
};